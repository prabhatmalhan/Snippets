{
	"cpp program": {
		"prefix": "cppro",
		"body": [
		  "#include<iostream>",
		  "$1"
		  "using namespace std;",
		  "",
		  "int main($2)",
		  "{",
		  "    $3",
		  "    return 0;",
		  "}"
		],
		"description": "basic c++ program"
	  }
	  
	  "include": {
		"prefix": "inc",
		"body": [
		  "#include <$1>"
		],
		"description": "include header file"
	  }

	  "for loop": {
		"prefix": "forl",
		"body": [
		  "for(int ${1:i}=${2:0} ; $1<${3:n} ; ++$1)",
		  "{",
		  "    $4",
		  "}"
		],
		"description": "for loop"
	  }

	  "reverse for loop": {
		"prefix": "rforl",
		"body": [
		  "for(int ${1:i}=${2:n} ; $1>${3:0} ; --$1)",
		  "{",
		  "    $4",
		  "}"
		],
		"description": "reverse for loop"
	  }

	  "input array": {
		"prefix": "inarr",
		"body": [
		  "for(int i=0 ; i<${1:n} ; ++i)",
		  "   cin>>${2:arr}[i];"
		],
		"description": "input array"
	  }

	  "Printf precise": {
		  "prefix": "pr",
		  "body": [
			  "cout<<$1${2:<<endl};"
		  ],
		  "description": "print statement"
	  }

	  "print array": {
		"prefix": "prarr",
		"body": [
		  "for(i=0 ; i<${1:n} ; ++i)",
		  "    cout<<${2:arr}[i]${3:<<endl};"
		],
		"description": "print array"
	  }

	  "sort array": {
		"prefix": "sort",
		"body": [
		  "for(int i=0;i<${1:n}-1;++i)",
		  "{",
		  "    sm = i;",
		  "    for(int j=i+1 ; j<$1 ; ++j)",
		  "        if(${2:arr}[sm]>$2[j])",
		  "          sm = j;",
		  "    int temp = $2[sm];",
		  "    $2[sm]=$2[i];",
		  "    $2[i]=temp;",
		  "}"
		],
		"description": "sort array"
	  }

	  "linear search": {
		"prefix": "lsearch",
		"body": [
		  "for(int i=0;i<${1:n};++i)",
		  "{",
		  "    if(${2:arr}[i] == ind)",
		  "    {",
		  "        $3",
		  "    }",
		  "}",
		  ""
		],
		"description": "linear search"
	  }

	  "binary search": {
		"prefix": "bsearch",
		"body": [
		  "int b=${1:0},e=${2:n}-1;",
		  "while(b<=e)",
		  "{",
		  "    int mid=(b+e)/2;",
		  "    if(${3:arr}[mid] == ${4:k})",
		  "    {",
		  "        $5",
		  "    }",
		  "    else if($3[mid] < $4)",
		  "    {",
		  "        $6",
		  "    }",
		  "    else",
		  "    {",
		  "        $7",
		  "    }",
		  "}",
		  "    ",
		  ""
		],
		"description": "binary search"
	  }

	  "trenary operator": {
		"prefix": "ter",
		"body": [
		  "$1?$2:$3"
		],
		"description": "ternary operator"
	  }

	  "while loop": {
		"prefix": "whilel",
		"body": [
		  "while(${1:n})",
		  "{",
		  "    $2",
		  "    --$1;",
		  "}"
		],
		"description": "while loop"
	  }

	  "do - while loop": {
		"prefix": "dowl",
		"body": [
		  "do",
		  "{",
		  "    $1",
		  "    --$2;",
		  "}while(${2:n});"
		],
		"description": "do - while loop"
	  }

	  "switch case": {
		"prefix": "sw",
		"body": [
		  "switch($1)",
		  "{",
		  "    case $2:$3",
		  "            break;",
		  "    $4",
		  "    default:$5",
		  "}"
		],
		"description": "switch case"
	  }

	  "input": {
		"prefix": "in",
		"body": [
		  "${1:int} ${2:n};",
		  "cin>>$2;"
		],
		"description": "input"
	  }

	  "function defination": {
		"prefix": "fun",
		"body": [
		  "${1:void} ${2:fun}($3)",
		  "{",
		  "    $4",
		  "    ${5:return ${6}};",
		  "}"
		],
		"description": "function defination"
	  }

	  "recursive function defination": {
		"prefix": "rfun",
		"body": [
		  "${1:void} ${2:fun}($3)",
		  "{",
		  "    if($4)",
		  "      return $5;",
		  "    else",
		  "    {",
		  "        $6",
		  "        ${7:return ${8}$2($9)};",
		  "     }",
		  "}"
		],
		"description": "recursive function defination"
	  }

	  "structure defintation": {
		"prefix": "stru",
		"body": [
		  "struct $1",
		  "{",
		  "    $2",
		  "}$3;"
		],
		"description": "structure defintation"
	  }

	  "file defination": {
		"prefix": "filed",
		"body": [
		  "File *${1:f};",
		  "$1 = fopen(\"$2\",\"${3:a+}\");",
		  "if($1 == NULL)",
		  "{",
		  "    puts(\"Unable to open file\");",
		  "    exit(1);",
		  "}"
		],
		"description": "file defination"
	  }

	  "malloc": {
  	        "prefix": "mal",
  		"body": [
   		"${1:int} *${2:p};",
    		"$2 = ($1*)malloc(${3:n}*sizeof($1));"
  	     ],
  	     "description": "malloc"
		  }
		  
	"Class Defination": {
			"prefix": "cla",
		"body": [
		"class $1",
		"{",
		"	$2",
		"	${3:private:}",
		"		$4",
		"	${5:public:}",
		"		$6",
		"};"
		],
		"description": "Class Defination"
		}
}
