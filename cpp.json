{
	"cpp program": {
		"prefix": "cppro",
		"body": [
			"#include<bits/stdc++.h>",
			"$1",
			"#define ll long long",
			"#define vi vector <int>",
			"using namespace std;",
			"\n",
			"int main($2)",
			"{",
			"\t$3",
			"\treturn 0;",
			"}"
		],
		"description": "basic c++ program"
	},
	"Printing a map": {
		"prefix": "prma",
		"body": [
			"for(auto x: m)",
			"\tcout<<x.first<<$1<<x.second<<endl;"
		],
		"description": "printing a map"
	},
	"competetive cpp program": {
		"prefix": "ccppro",
		"body": [
			"#include<bits/stdc++.h>",
			"",
			"#define mod 1000000007",
			"#define INF 1000000005",
			"#define INFL 1000000000000000005ll",
			"#define PI 3.1415926535897932384626",
			"#define all(x) x.begin(), x.end()",
			"#define sortall(x) sort(all(x))",
			"#define pb push_back",
			"#define mp make_pair",
			"#define gcd __gcd",
			"#define pii pair<int, int>",
			"#define vi vector <int>",
			"#define vp vector<pii>",
			"#define ll long long\n",
			"using namespace std;",
			"\n// DEBUG",
			"void __PRINT(int x) {cout << x;}",
			"void __PRINT(long x) {cout << x;}",
			"void __PRINT(unsigned x) {cout << x;}",
			"void __PRINT(unsigned long x) {cout << x;}",
			"void __PRINT(unsigned long long x) {cout << x;}",
			"void __PRINT(float x) {cout << x;}",
			"void __PRINT(double x) {cout << x;}",
			"void __PRINT(long double x) {cout << x;}",
			"void __PRINT(char x) {cout << '\\'' << x << '\\'';}",
			"void __PRINT(const char *x) {cout << '\"' << x << '\"';}",
			"void __PRINT(const string &x) {cout << '\"' << x << '\"';}",
			"void __PRINT(bool x) {cout << (x ? \"true\" : \"false\");}",
			"\ntemplate <typename T, typename V>",
			"void __PRINT(const pair<T, V> &x);",
			"template <typename T>",
			"void __PRINT(const vector<T> &x);",
			"template<typename T>",
			"void __PRINT(const T &x);\n",
			"template<typename T, typename V>",
			"void __PRINT(const pair<T, V> &x) {cout << '{'; __PRINT(x.first); cout << ','; __PRINT(x.second); cout << \"}\";}",
			"template<typename T, typename V, typename U>",
			"void __PRINT(const tuple<T, V, U> &x) {cout << '{'; __PRINT(get<0>(x)); cout << ','; __PRINT(get<1>(x));cout << ',' << get<2>(x); cout << \"}\";}",
			"template<typename T>",
			"void __PRINT(const vector<T> &x) {cout << \"{\";for(int u69=0;u69<x.size();u69++){__PRINT(x[u69]);cout << (u69+1==x.size()?\"\":\",\");};cout << \"}\";}",
			"template<typename T>",
			"void __PRINT(const T &x) {int f = 0; cout << '{'; for (auto &i: x) cout << (f++ ? \",\" : \"\"), __PRINT(i); cout << \"}\";}",
			"void _PRINT() {cout << \"]\"<<endl;}",
			"template <typename T, typename... V>",
			"void _PRINT(T t, V... v) {__PRINT(t); if (sizeof...(v)) cout << \", \"; _PRINT(v...);}",
			"#ifndef ONLINE_JUDGE",
			"#define debug(x...) cout << \"[\" << #x << \"] = [\"; _PRINT(x)",
			"#else",
			"#define debug(x...)",
			"#endif\n",
			"int main()",
			"{",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(NULL);\n",
			"\tint no=1;",
			"\tcin>>no;",
			"\tfor (int f = 0; f < no; f++)",
			"\t{",
			"\t\t$3",
			"\t}",
			"\t$4",
			"\treturn 0;",
			"}"
		],
		"description": "Competetive c++ program"
	},
	"include": {
		"prefix": "inc",
		"body": [
			"#include <$1>"
		],
		"description": "include header file"
	},
	"online judge": {
		"prefix": "onj",
		"body": [
			"\n#ifndef ONLINE_JUDGE",
    			"\tfreopen(\"input.txt\", \"r\", stdin);",
    			"\tfreopen(\"output.txt\", \"w\", stdout);",
			"#endif\n",
		],
		"description": "define input and output file as I/O"
	},
	"for loop": {
		"prefix": "forl",
		"body": [
			"for(int ${1:i}=${2:0} ; $1<${3:n} ; ++$1)",
			"{",
			"\t$4",
			"}"
		],
		"description": "for loop"
	},
	"Count Frequency and save in map": {
		"prefix": "frem",
		"body": [
			"map<int, int> m;",
			"for (int i = 0; i < n; i++)",
			"{",
			"\tm[arr[i]]++;",
			"}"
		],
		"description": "frequency count"
	},
	"reverse for loop": {
		"prefix": "rforl",
		"body": [
			"for(int ${1:i}=${2:n} ; $1>${3:0} ; --$1)",
			"{",
			"\t$4",
			"}"
		],
		"description": "reverse for loop"
	},
	"input array": {
		"prefix": "inarr",
		"body": [
			"int ${1:arr}[${2:n}];",
			"for(int i=0 ; i<${2:n} ; ++i)",
			"\tcin>>${1:arr}[i];"
		],
		"description": "input array"
	},
	"input 2-D array": {
		"prefix": "inarr2",
		"body": [
			"int ${1:arr}[${2:m}][${3:n}];",
			"for(int i=0 ; i<${2:m} ; ++i)",
			"\tfor(int j=0 ; j<${3:n} ; ++j)",
			"\t\tcin>>${1:arr}[i][j];"
		],
		"description": "input 2-d array"
	},
	"input vector": {
		"prefix": "invec",
		"body": [
			"vi ${1:arr}(${2:n});",
			"for(int i=0 ; i<${2:n} ; ++i)",
			"\tcin>>${1:arr}[i];"
		],
		"description": "input array"
	},
	"Sort Line": {
		"prefix": "so",
		"body": [
			"sort(arr,arr+n);"
		],
		"description": "line for sort"
	},
	"vector Decleration": {
		"prefix": "vi",
		"body": [
			"vector <int> v"
		],
		"description": "line for vector"
	},
	"Sort With Index Tracked": {
		"prefix": "soin",
		"body": [
			"sort(ind, ind + n, [&](int i, int j){ return arr[i] < arr[j]; });",
			"sort(arr, arr + n);"
		],
		"description": "line for sorting with indexes in track"
	},
	"Prefix sum array": {
		"prefix": "pref",
		"body": [
			"int psa[n+1];",
			"psa[0]=0;",
			"for (int i = 0; i < n; i++)",
			"{",
			"\tpsa[i+1] = psa[i] + arr[i];",
			"}"
		],
		"description": "prefix sum of array"
	},
	"Printf precise": {
		"prefix": "pr",
		"body": [
			"cout<<$1${2:<<endl};"
		],
		"description": "print statement"
	},
	"print array": {
		"prefix": "prarr",
		"body": [
			"for(int i=0 ; i<${1:n} ; ++i)",
			"\tcout<<${2:arr}[i]<<\" \";"
		],
		"description": "print array"
	},
	"print 2-D array": {
		"prefix": "prarr2",
		"body": [
			"for(int i=0 ; i<${1:n} ; ++i)",
			"{",
			"\tfor(int j=0 ; j<${2:n} ; ++j)",
			"\t\tcout<<${3:arr}[i][j]${4:<< \" \"};",
			"\tcout << endl;",
			"}"
		],
		"description": "print 2-d array"
	},
	"print vector": {
		"prefix": "prvec",
		"body": [
			"for(int i=0 ; i<v.size() ; ++i)",
			"    cout<<v[i]<<\" \";"
		],
		"description": "print array"
	},
	"sort array": {
		"prefix": "compsrt",
		"body": [
			"for(int i=0;i<${1:n}-1;++i)",
			"{",
			"    sm = i;",
			"    for(int j=i+1 ; j<$1 ; ++j)",
			"    \tif(${2:arr}[sm]>$2[j])",
			"    \t\tsm = j;",
			"    int temp = $2[sm];",
			"    $2[sm]=$2[i];",
			"    $2[i]=temp;",
			"}"
		],
		"description": "sort array"
	},
	"linear search": {
		"prefix": "lsearch",
		"body": [
			"for(int i=0;i<${1:n};++i)",
			"{",
			"\tif(${2:arr}[i] == ind)",
			"\t{",
			"\t\t$3",
			"\t}",
			"}",
			""
		],
		"description": "linear search"
	},
	"binary search": {
		"prefix": "bsearch",
		"body": [
			"int b=${1:0},e=${2:n}-1;",
			"while(b<=e)",
			"{",
			"\tint mid=(b+e)/2;",
			"\tif(${3:arr}[mid] == ${4:k})",
			"\t{",
			"\t\t$5",
			"\t}",
			"\telse if($3[mid] < $4)",
			"\t{",
			"\t\t$6",
			"\t}",
			"\telse",
			"\t{",
			"\t\t$7",
			"\t}",
			"}"
		],
		"description": "binary search"
	},
	"trenary operator": {
		"prefix": "ter",
		"body": [
			"$1?$2:$3"
		],
		"description": "ternary operator"
	},
	"while loop": {
		"prefix": "whilel",
		"body": [
			"while(${1:n})",
			"{",
			"\t$2",
			"\t--$1;",
			"}"
		],
		"description": "while loop"
	},
	"do - while loop": {
		"prefix": "dowl",
		"body": [
			"do",
			"{",
			"\t$1",
			"\t--$2;",
			"}while(${2:n});"
		],
		"description": "do - while loop"
	},
	"switch case": {
		"prefix": "sw",
		"body": [
			"switch($1)",
			"{",
			"\tcase $2:$3",
			"\t\t  break;",
			"\t$4",
			"\tdefault:$5",
			"}"
		],
		"description": "switch case"
	},
	"input": {
		"prefix": "in",
		"body": [
			"${1:int} ${2:n};",
			"cin>>$2;"
		],
		"description": "input"
	},
	"function defination": {
		"prefix": "fun",
		"body": [
			"${1:void} ${2:fun}($3)",
			"{",
			"\t$4",
			"\t${5:return ${6}};",
			"}"
		],
		"description": "function defination"
	},
	"recursive function defination": {
		"prefix": "rfun",
		"body": [
			"${1:void} ${2:fun}($3)",
			"{",
			"\tif($4)",
			"\t\treturn $5;",
			"\telse",
			"\t{",
			"\t\t$6",
			"\t\t${7:return ${8}$2($9)};",
			"\t}",
			"}"
		],
		"description": "recursive function defination"
	},
	"structure defintation": {
		"prefix": "stru",
		"body": [
			"struct $1",
			"{",
			"\t$2",
			"}$3;"
		],
		"description": "structure defintation"
	},
	"file defination": {
		"prefix": "filopn",
		"body": [
			"File *${1:f};",
			"$1 = fopen(\"$2\",\"${3:a+}\");",
			"if($1 == NULL)",
			"{",
			"\tputs(\"Unable to open file\");",
			"\texit(1);",
			"}"
		],
		"description": "file defination"
	},
	"malloc": {
		"prefix": "mal",
		"body": [
			"${1:int} *${2:p};",
			"$2 = ($1*)malloc(${3:n}*sizeof($1));"
		],
		"description": "malloc"
	},
	"Class Defination": {
		"prefix": "cla",
		"body": [
			"class $1",
			"{",
			"\t$2",
			"\t${3:private:}",
			"\t$4",
			"\t${5:public:}",
			"\t$6",
			"};"
		],
		"description": "Class Defination"
	},
	"Factorial Function Defination": {
		"prefix": "fct",
		"body": [
			"unordered_map<ll int,ll int> dp;",
			"ll fact(ll n)",
			"{",
			"\tif(n == 0) return 1;",
			"\tif(n == 1) return n;",
			"\tif(dp.find(n) != dp.end()) return dp[n];",
			"\treturn dp[n] = n*fact(n-1);",
			"}"
		],
		"description": "Factorial Function"
	},
	"Longest Common Substring": {
		"prefix": "lcs",
		"body": [
			"int longcomstr(string s1, string s2)",
			"{",
			"\tint n = s1.length();",
			"\tint m = s2.length();",
			"\tint dp[n+1][m+1];",
			"\tfor(int i=0 ; i<=n ; ++i)",
			"\t{",
			"\t\tfor(int j=0 ; j<=m ; ++j)",
			"\t\t{",
			"\t\t\tif (i==0 || j==0)",
			"\t\t\t\tdp[i][j] = 0;",
			"\t\t}",
			"\t}",
			"\tfor(int i=1 ; i<=n ; ++i)",
			"\t{",
			"\t\tfor(int j=1 ; j<=m ; ++j)",
			"\t\t\t{",
			"\t\t\tif (s1[i-1] ==  s2[j-1])",
			"\t\t\t\tdp[i][j] = 1+dp[i-1][j-1];",
			"\t\t\telse",
			"\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]);",
			"\t\t\t}",
			"\t\t}",
			"\treturn dp[n][m];",
			"}",
		],
		"description": "Longest Common Substring"
	},
	"Sum of Digits of a Number": {
		"prefix": "sodg",
		"body": [
			"int getSum(int n)",
			"{",
			"\tint sum = 0;",
			"\twhile (n != 0)",
			"\t{",
			"\t\tsum = sum + n % 10;",
			"\t\tn = n / 10;",
			"\t}",
			"\treturn sum;",
			"}"
		],
		"description": "Sum of Digits of a Number Function"
	},
	"Fibonacci Series": {
		"prefix": "fibo",
		"body": [
			"unordered_map <int, int>dp;",
			"\nint fibonacci(int n)",
			"{",
			"\tint f=0, s=0;",
			"\tif (n<=1)",
			"\t\treturn n;",
			"\tif (dp.find(n-1) != dp.end())",
			"\t\tf = dp[n-1];",
			"\telse",
			"\t\tf = fibonacci(n-1);",
			"\tif (dp.find(n-2) != dp.end())",
			"\t\ts = dp[n-2];",
			"\telse",
			"\t\ts = fibonacci(n-2);",
			"\treturn dp[n] = (f+s);",
			"}"
		],
		"description": "Fibonacci Series uding DP"
	},
	"Stopwatch": {
		"prefix": "sto",
		"body": [
			"double tick()",
			"{",
			"\tstatic clock_t start_time;",
			"\tclock_t end_time = clock();",
			"\tdouble diff = 1.0 * (end_time - start_time) / CLOCKS_PER_SEC;",
			"\tstart_time = end_ticks;",
			"\treturn diff;",
			"}"
		],
		"description": "function to return time lapsed wherever called"
	},
	"Power Function": {
		"prefix": "mpow",
		"body": [
			"ll newpow(int b, int e, int modu = 1)",
			"{",
			"\tll result = 1, base = b, exp = e;",
			"\tif (modu)",
			"\t\tbase %= mod;",
			"\twhile (exp > 0)",
			"\t{",
			"\t\tif (exp & 1)",
			"\t\t{",
			"\t\t\tresult = ((ll)result * base);",
			"\t\t\tif (modu)",
			"\t\t\t\tresult %= mod;",
			"\t\t}",
			"\t\tbase = ((ll)base * base);",
			"\t\tif (modu)",
			"\t\t\tbase %= mod;",
			"\t\texp >>= 1;",
			"\t}",
			"\treturn result;",
			"}",
		],
		"description": "Power of a number",
	},
	"Sort in Reverse": {
		"prefix": "revso",
		"body": [
			"sort(arr, arr + n, greater<int>());",
		],
		"description": "Sort an array in reverse order",
	},
	"Breadth First Search": {
		"prefix": "bfs",
		"body": [
			"void bfs(vi adj[], int u, int n)",
			"{",
			"\tstatic vi visited(n);",
			"\tvisited[u] = 1;",
			"\tstatic queue <int> q;",
			"\tq.push(u);",
			"\tcout<<u;",
			"\twhile (!q.empty())",
			"\t{",
			"\t\tu = q.front();",
			"\t\tq.pop();",
			"\t\tfor (auto x : adj[u])",
			"\t\t{",
			"\t\t\tif (visited[x] != 1)",
			"\t\t\t{",
			"\t\t\t\tvisited[x] =1;",
			"\t\t\t\tcout<<x;",
			"\t\t\t\tq.push(x);",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"}",
		],
		"description": "Find path Using Breadth First Search",
	},
	"Depth First Search": {
		"prefix": "dfs",
		"body": [
			"void dfs(vi adj[], int u, int n)",
			"{",
			"\tstatic vi visited(n);",
			"\tif (visited[u] == 1)",
			"\t\treturn;",
			"\telse",
			"\t{",
			"\t\tvisited[u] = 1;",
			"\t\tcout<<u;",
			"\t\tfor (auto x : adj[u])",
			"\t\t{",
			"\t\t\tdfs(adj, x, n);",
			"\t\t}",
			"\t}",
			"}",
		],
		"description": "Find path Using Depth First Search",
	},
	"Minimum priority queue": {
		"prefix": "minpq",
		"body": [
			"priority_queue<int, vi, greater<int>> ${1:mpq};",
		],
		"description": "Priority queue in ascending order",
	}
}
